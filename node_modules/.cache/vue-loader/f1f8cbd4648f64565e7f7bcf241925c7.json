{"remainingRequest":"/Users/kimjngyun/frontend/sketch2art/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kimjngyun/frontend/sketch2art/src/components/sketch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kimjngyun/frontend/sketch2art/src/components/sketch.vue","mtime":1619716068478},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/cache-loader/dist/cjs.js","mtime":1619073328948},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/babel-loader/lib/index.js","mtime":1619154893880},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/cache-loader/dist/cjs.js","mtime":1619073328948},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/vue-loader/lib/index.js","mtime":1619154896205}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4JwpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAnQ2FudmFzV3JhcHBlcicsCiAgICBkYXRhOiAoKSA9PiAoewogICAgICAgIGNvbnRleHQ6IG51bGwsCiAgICAgICAgY2FudmFzOiBudWxsLAogICAgICAgIHByZXZpb3VzWDogMCwKICAgICAgICBwcmV2aW91c1k6IDAsCiAgICAgICAgY3VycmVudFg6IDAsCiAgICAgICAgY3VycmVudFk6IDAsCiAgICAgICAgcHJlc3Npbmc6IGZhbHNlLAogICAgICAgIHByZXNzZWRBdDogRGF0ZS5ub3coKSwKICAgICAgICBoaWdobGlnaHRTdGFydFBvaW50OiBmYWxzZSwKICAgICAgICBzaGFwZXM6IFtdLAogICAgICAgIGN1cnJlbnRTaGFwZTogW10sCiAgICAgICAgaW50ZXJ2YWxMYXN0UG9zaXRpb246IFstMSwgLTFdLAogICAgICAgIHJlYWRlcjogbmV3IEZpbGVSZWFkZXIoKQogICAgfSksCiAgICBtZXRob2RzOiB7CiAgICAgICAgLi4ubWFwQWN0aW9ucyhbJ2FkZE5ld0ltYWdlJ10pLAogICAgICAgIG5ld0ZpbGUgKCkgewogICAgICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJy5maWxlSW5wdXQnKS5maWxlcwogICAgICAgICAgICBjb25zdCBuZXdGaWxlID0gZmlsZXNbZmlsZXMubGVuZ3RoIC0gMV0KCiAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlYWRBc0RhdGFVUkwobmV3RmlsZSkKICAgICAgICB9LAoKICAgICAgICBhdHRhY2hGaWxlICgpIHsKICAgICAgICAgICAgdGhpcy4kZWwucXVlcnlTZWxlY3RvcignLmZpbGVJbnB1dCcpLmNsaWNrKCkKICAgICAgICB9LAoKICAgICAgICBjYXB0dXJlICgpIHsKICAgICAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcigiY2FudmFzIikKICAgICAgICAgICAgY29uc3QgbmV3SW1hZ2UgPSBjYW52YXMudG9EYXRhVVJMKCJpbWFnZS9qcGVnIik7CgogICAgICAgICAgICB0aGlzLmFkZE5ld0ltYWdlKG5ld0ltYWdlKQogICAgICAgICAgICBjb25zb2xlLmxvZygnQ2FwdHVyZWQnKQogICAgICAgIH0sCiAgICAgICAgZXJhc2VDYW52YXMgKCkgewogICAgICAgICAgICB0aGlzLnNoYXBlcyA9IFtdCiAgICAgICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCkKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICJ3aGl0ZSIKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIDUxMiwgNTEyKQogICAgICAgICAgICBjb25zb2xlLmxvZygnZXJhc2UgdGhlIGNhbnZhcycpCiAgICAgICAgfSwKICAgICAgICBwcmVwYXJlTmV3U2hhcGUgKCkgewogICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZSA9IFsKICAgICAgICAgICAgICAgIFtdLAogICAgICAgICAgICAgICAgW10sCiAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICBzdG9yZUNvb3JkaW5hdGVzICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWxMYXN0UG9zaXRpb25bMF0gIT09IHRoaXMucHJldmlvdXNYICYmCiAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsTGFzdFBvc2l0aW9uWzFdICE9PSB0aGlzLnByZXZpb3VzWSkgewogICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbExhc3RQb3NpdGlvbiA9IFt0aGlzLnByZXZpb3VzWCwgdGhpcy5wcmV2aW91c1ldCiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZVswXS5wdXNoKHRoaXMucHJldmlvdXNYKQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2hhcGVbMV0ucHVzaCh0aGlzLnByZXZpb3VzWSkKICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNoYXBlWzJdLnB1c2goRGF0ZS5ub3coKSAtIHRoaXMucHJlc3NlZEF0KQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb21taXRDdXJyZW50U2hhcGUgKCkgewogICAgICAgICAgICB0aGlzLnNoYXBlcy5wdXNoKHRoaXMuY3VycmVudFNoYXBlKQogICAgICAgICAgICAvKgogICAgICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIGNhbnZhc1dpZHRoOiB0aGlzLmNhbnZhcy53aWR0aCwKICAgICAgICAgICAgICAgIGNhbnZhc0hlaWdodDogdGhpcy5jYW52YXMuaGVpZ2h0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgKi8KICAgICAgICB9LAogICAgICAgIGRyYXcgKG1vdXNlRXZlbnQpIHsKICAgICAgICAgICAgbGV0IHRpbWVJbnRlcnZhbAogICAgICAgICAgICBzd2l0Y2ggKG1vdXNlRXZlbnQudHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vkb3duJzoKICAgICAgICAgICAgICAgICAgICB0aW1lSW50ZXJ2YWwgPSB0aGlzLmRyYXdNb3VzZURvd24obW91c2VFdmVudCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY2FzZSAnbW91c2VvdXQnOgogICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcmVzc2luZykgYnJlYWsKICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVJbnRlcnZhbCkKICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1pdEN1cnJlbnRTaGFwZSgpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNldXAnOgogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGVhcmluZyBpbnRlcnZhbCEnKQogICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NpbmcgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZUludGVydmFsKQogICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWl0Q3VycmVudFNoYXBlKCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzoKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcmVzc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdNb3VzZU1vdmUobW91c2VFdmVudCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZHJhd01vdXNlRG93biAobW91c2VFdmVudCkgewogICAgICAgICAgICBsZXQgaGlnaGxpZ2h0U3RhcnRQb2ludAogICAgICAgICAgICBjb25zdCBkcmF3Q29sb3JTdGFydGluZ1BvaW50ID0gJ2JsYWNrJwogICAgICAgICAgICB0aGlzLnVwZGF0ZVhZKG1vdXNlRXZlbnQpCiAgICAgICAgICAgIHRoaXMucHJlc3NpbmcgPSB0cnVlCiAgICAgICAgICAgIHRoaXMucHJlc3NlZEF0ID0gRGF0ZS5ub3coKQogICAgICAgICAgICBoaWdobGlnaHRTdGFydFBvaW50ID0gdHJ1ZQogICAgICAgICAgICB0aGlzLnByZXBhcmVOZXdTaGFwZSgpCiAgICAgICAgICAgIGlmIChoaWdobGlnaHRTdGFydFBvaW50KSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCkKICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBkcmF3Q29sb3JTdGFydGluZ1BvaW50CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QodGhpcy5jdXJyZW50WCwgdGhpcy5jdXJyZW50WSwgMiwgMikKICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKQogICAgICAgICAgICAgICAgaGlnaGxpZ2h0U3RhcnRQb2ludCA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnN0b3JlQ29vcmRpbmF0ZXMoKSwgOSkKICAgICAgICB9LAogICAgICAgIGRyYXdNb3VzZU1vdmUgKG1vdXNlRXZlbnQpIHsKICAgICAgICAgICAgY29uc3QgZHJhd1N0cm9rZSA9IDEwCiAgICAgICAgICAgIGNvbnN0IGRyYXdDb2xvciA9ICdibGFjaycKICAgICAgICAgICAgLy8gVE9ETzogbWFrZSBhIGNvbmZpZyBhbmQgdXNlIGl0LgogICAgICAgICAgICB0aGlzLnVwZGF0ZVhZKG1vdXNlRXZlbnQpCiAgICAgICAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKQogICAgICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKHRoaXMucHJldmlvdXNYLCB0aGlzLnByZXZpb3VzWSkKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyh0aGlzLmN1cnJlbnRYLCB0aGlzLmN1cnJlbnRZKQogICAgICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSBkcmF3Q29sb3IKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IGRyYXdDb2xvcgogICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZUNhcCA9ICdyb3VuZCcKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVKb2luID0gJ3JvdW5kJwogICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gZHJhd1N0cm9rZQogICAgICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlKCkKICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNsb3NlUGF0aCgpCiAgICAgICAgfSwKICAgICAgICB1cGRhdGVYWSAobW91c2VFdmVudCkgewogICAgICAgICAgICB0aGlzLnByZXZpb3VzWCA9IHRoaXMuY3VycmVudFgKICAgICAgICAgICAgdGhpcy5wcmV2aW91c1kgPSB0aGlzLmN1cnJlbnRZCiAgICAgICAgICAgIHRoaXMuY3VycmVudFggPSBtb3VzZUV2ZW50LmNsaWVudFggLSB0aGlzLmNhbnZhcy5vZmZzZXRMZWZ0CiAgICAgICAgICAgIHRoaXMuY3VycmVudFkgPSBtb3VzZUV2ZW50LmNsaWVudFkgLSB0aGlzLmNhbnZhcy5vZmZzZXRUb3AKICAgICAgICB9LAogICAgfSwKICAgIG1vdW50ZWQgKCkgewogICAgICAgIHRoaXMuY2FudmFzID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcignI2NhbnZhcycpCiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKQoJCXRoaXMuY29udGV4dC5maWxsU3R5bGUgPSAid2hpdGUiCgkJdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIDUxMiwgNTEyKQogICAgICAgIGNvbnN0IG1vdXNlRXZlbnRzID0gWydtb3VzZW1vdmUnLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnbW91c2VvdXQnXQogICAgICAgIG1vdXNlRXZlbnRzLm1hcChldmVudE5hbWUgPT4gewogICAgICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgdGhpcy5kcmF3KQogICAgICAgIH0pCiAgICAgICAgY29uc29sZS5sb2codGhpcy5jb250ZXh0KQogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY2FudmFzKQoKICAgICAgICB0aGlzLnJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gewogICAgICAgICAgICB0aGlzLmFkZE5ld0ltYWdlKHRoaXMucmVhZGVyLnJlc3VsdCkKICAgICAgICB9KQogICAgfQp9Cg=="},{"version":3,"sources":["sketch.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"sketch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-layout class=\"canvas-wrapper\">\n        <canvas id=\"canvas\" width=\"512\" height=\"512\"></canvas>\n        <br/>\n        <v-btn @click=\"eraseCanvas\">clear</v-btn>\n        <v-btn @click=\"capture\">capture</v-btn>\n    </v-layout>\n\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nexport default {\n    name: 'CanvasWrapper',\n    data: () => ({\n        context: null,\n        canvas: null,\n        previousX: 0,\n        previousY: 0,\n        currentX: 0,\n        currentY: 0,\n        pressing: false,\n        pressedAt: Date.now(),\n        highlightStartPoint: false,\n        shapes: [],\n        currentShape: [],\n        intervalLastPosition: [-1, -1],\n        reader: new FileReader()\n    }),\n    methods: {\n        ...mapActions(['addNewImage']),\n        newFile () {\n            const files = this.$el.querySelector('.fileInput').files\n            const newFile = files[files.length - 1]\n\n            this.reader.readAsDataURL(newFile)\n        },\n\n        attachFile () {\n            this.$el.querySelector('.fileInput').click()\n        },\n\n        capture () {\n            const canvas = this.$el.querySelector(\"canvas\")\n            const newImage = canvas.toDataURL(\"image/jpeg\");\n\n            this.addNewImage(newImage)\n            console.log('Captured')\n        },\n        eraseCanvas () {\n            this.shapes = []\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            this.context.fillStyle = \"white\"\n            this.context.fillRect(0, 0, 512, 512)\n            console.log('erase the canvas')\n        },\n        prepareNewShape () {\n            this.currentShape = [\n                [],\n                [],\n                []\n            ]\n        },\n        storeCoordinates () {\n            if (this.intervalLastPosition[0] !== this.previousX &&\n                this.intervalLastPosition[1] !== this.previousY) {\n                this.intervalLastPosition = [this.previousX, this.previousY]\n                this.currentShape[0].push(this.previousX)\n                this.currentShape[1].push(this.previousY)\n                this.currentShape[2].push(Date.now() - this.pressedAt)\n            }\n        },\n        commitCurrentShape () {\n            this.shapes.push(this.currentShape)\n            /*\n            const drawOptions = {\n                canvasWidth: this.canvas.width,\n                canvasHeight: this.canvas.height\n            }\n            */\n        },\n        draw (mouseEvent) {\n            let timeInterval\n            switch (mouseEvent.type) {\n                case 'mousedown':\n                    timeInterval = this.drawMouseDown(mouseEvent)\n                    break\n                case 'mouseout':\n                    if (!this.pressing) break\n                    clearInterval(timeInterval)\n                    this.commitCurrentShape()\n                    break\n                case 'mouseup':\n                    console.log('clearing interval!')\n                    this.pressing = false\n                    clearInterval(timeInterval)\n                    this.commitCurrentShape()\n                    break\n                case 'mousemove':\n                    if (this.pressing) {\n                        this.drawMouseMove(mouseEvent)\n                    }\n                    break\n            }\n        },\n        drawMouseDown (mouseEvent) {\n            let highlightStartPoint\n            const drawColorStartingPoint = 'black'\n            this.updateXY(mouseEvent)\n            this.pressing = true\n            this.pressedAt = Date.now()\n            highlightStartPoint = true\n            this.prepareNewShape()\n            if (highlightStartPoint) {\n                this.context.beginPath()\n                this.context.fillStyle = drawColorStartingPoint\n                this.context.fillRect(this.currentX, this.currentY, 2, 2)\n                this.context.closePath()\n                highlightStartPoint = false\n            }\n            return window.setInterval(() => this.storeCoordinates(), 9)\n        },\n        drawMouseMove (mouseEvent) {\n            const drawStroke = 10\n            const drawColor = 'black'\n            // TODO: make a config and use it.\n            this.updateXY(mouseEvent)\n            this.context.beginPath()\n            this.context.moveTo(this.previousX, this.previousY)\n            this.context.lineTo(this.currentX, this.currentY)\n            this.context.strokeStyle = drawColor\n            this.context.fillStyle = drawColor\n            this.context.lineCap = 'round'\n            this.context.lineJoin = 'round'\n            this.context.lineWidth = drawStroke\n            this.context.stroke()\n            this.context.closePath()\n        },\n        updateXY (mouseEvent) {\n            this.previousX = this.currentX\n            this.previousY = this.currentY\n            this.currentX = mouseEvent.clientX - this.canvas.offsetLeft\n            this.currentY = mouseEvent.clientY - this.canvas.offsetTop\n        },\n    },\n    mounted () {\n        this.canvas = this.$el.querySelector('#canvas')\n        this.context = this.canvas.getContext('2d')\n\t\tthis.context.fillStyle = \"white\"\n\t\tthis.context.fillRect(0, 0, 512, 512)\n        const mouseEvents = ['mousemove', 'mousedown', 'mouseup', 'mouseout']\n        mouseEvents.map(eventName => {\n            this.canvas.addEventListener(eventName, this.draw)\n        })\n        console.log(this.context)\n        console.log(this.canvas)\n\n        this.reader.addEventListener('load', () => {\n            this.addNewImage(this.reader.result)\n        })\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}