{"remainingRequest":"/Users/kimjngyun/frontend/sketch2art/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kimjngyun/frontend/sketch2art/src/components/ImageCard.vue?vue&type=style&index=0&id=252ced8b&scoped=true&lang=css&","dependencies":[{"path":"/Users/kimjngyun/frontend/sketch2art/src/components/ImageCard.vue","mtime":1621592688684},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/css-loader/dist/cjs.js","mtime":1619073369298},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1619154896205},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/postcss-loader/src/index.js","mtime":1619073370318},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/cache-loader/dist/cjs.js","mtime":1619073328948},{"path":"/Users/kimjngyun/frontend/sketch2art/node_modules/vue-loader/lib/index.js","mtime":1619154896205}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI3dyYXBJQyB7CiAgZGlzcGxheTogZmxleDsKICB3aWR0aDogNTEycHg7Cn0KI251bGwgewogIHdpZHRoOiA1MTJweDsKICBoZWlnaHQ6IDUxMnB4OwoKfQppbWcgewogIHdpZHRoOiAyNTZweDsKICBoZWlnaHQ6IDI1NnB4Owp9Ci5pbmYgewogIGRpc3BsYXk6IGZlbHg7CiAgZmxleC1mbG93OmNvbHVtbiBub3dyYXA7CiAgd2lkdGg6IDUxMnB4OwogIG1hcmdpbjogMDsKICBsaW5lLWhlaWdodDogMDsKfQouaW5mIGltZ3sKICBmbGV4OiAyIDIgMDsKfQo="},{"version":3,"sources":["ImageCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ImageCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"wrap\">\n  \n    <div v-if=\"isProcessed===false\"><img id=\"null\" src=\"../assets/1.jpg\" /></div>\n    <div v-else class=\"inf\">\n      <img id=\"i0\" :src=\"temp0\" />\n      <img id=\"i1\" :src=\"temp1\" />\n      <img id=\"i2\" :src=\"temp2\" />\n      <img id=\"i3\" :src=\"temp3\" />\n    </div>\n    <br/>\n  <div>\n    <v-btn v-on:click=\"change\" text color=\"black\" outlined elevation=\"0\">변경</v-btn>\n  </div>\n    \n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport { mapGetters } from 'vuex'\nexport default {\n  name: 'ImageCard',\n  props: {\n    image: mapGetters('getImages')\n  },\n  data: () => ({\n    isProcessed: false,\n    // style: 10,\n    temp0: null,\n    temp1: null,\n    temp2: null,\n    temp3: null\n  }),\n\n  methods: {\n    dataURLtoFile (dataURL, fileName) {\n      const arr = dataURL.split(',')\n      const mime = arr[0].match(/:(.*?);/)[1]\n      const bstr = atob(arr[1])\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n)\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n\n      return new File([u8arr], fileName, {type: mime})\n    },\n    submit () {\n\n    },\n    async stylize () {\n      const formData = new FormData()\n      formData.append('contentImage', this.dataURLtoFile(this.image.original))\n\n      const baseURL = this.$store.getters.urlOf('styleTransferServer')\n      const apiURL = `${baseURL}/api/stylize`\n\n      for (var i=0; i<4; i++){\n        const response = await axios.post(apiURL, formData, {\n          responseType: 'arraybuffer'\n        })\n        const styledImageURL =\n          'data:' +\n          response.headers['content-type'] +\n          ';base64,' +\n          Buffer.from(response.data, 'binary').toString('base64') \n        switch (i){\n          case 0:\n            this.temp0 = styledImageURL\n            break\n          case 1:\n            this.temp1 = styledImageURL\n            break\n          case 2:\n            this.temp2 = styledImageURL\n            break\n          case 3:\n            this.temp3 = styledImageURL\n            break\n        }\n      }\n      this.isProcessed = true\n    }\n  },\n\n  watch: {\n    image: function () {\n      this.stylize()\n    },\n    check_image (img) { \n      this.image = img \n    }\n  },\n  mounted () {\n    this.stylize()\n  },\n  computed: {\n    check_image () { return this.$store.getters.getImages[0] }\n  }\n}\n</script>\n\n<style scoped>\n#wrapIC {\n  display: flex;\n  width: 512px;\n}\n#null {\n  width: 512px;\n  height: 512px;\n\n}\nimg {\n  width: 256px;\n  height: 256px;\n}\n.inf {\n  display: felx;\n  flex-flow:column nowrap;\n  width: 512px;\n  margin: 0;\n  line-height: 0;\n}\n.inf img{\n  flex: 2 2 0;\n}\n</style>\n"]}]}